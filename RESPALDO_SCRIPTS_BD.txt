CREATE TABLE usuario (
    cedulaUsuario int NOT NULL PRIMARY KEY,
    nombre VARCHAR(25) NOT NULL,
    segundonombre VARCHAR(25),
    apellido1 VARCHAR(25) NOT NULL,
    apellido2 VARCHAR(25),
    correo VARCHAR(100) NOT NULL,
    clave VARCHAR(100) NOT NULL,
    celular int NOT NULL,
    rol VARCHAR(20) NOT NULL
);

ALTER TABLE usuario ALTER COLUMN clave VARCHAR(100) NOT NULL

CREATE TABLE estudiante (
    cedulaEstudiante int NOT NULL UNIQUE FOREIGN KEY REFERENCES usuario(cedulaUsuario),
    carne int NOT NULL PRIMARY KEY,
    codigoCarrera VARCHAR(20) NOT NULL FOREIGN KEY REFERENCES carrera(codigoCarrera),
    idSede int NOT NULL FOREIGN KEY REFERENCES carrera(idSede),
    generacion int
);



CREATE TABLE carrera (
    codigoCarrera VARCHAR(20) NOT NULL PRIMARY KEY,
    idSede INT NOT NULL UNIQUE FOREIGN KEY REFERENCES sede(idSede),
    nombreCarrera VARCHAR(100) NOT NULL
);


CREATE TABLE sede(
    idSede int NOT NULL PRIMARY KEY,
    nombreSede VARCHAR(50) NOT NULL
);

CREATE TABLE personal (
    cedulaPersonal INT NOT NULL PRIMARY KEY FOREIGN KEY REFERENCES usuario(cedulaUsuario),
    idSede INT NOT NULL FOREIGN KEY REFERENCES sede(idSede),
    telOficina VARCHAR(25),
    foto VARCHAR(255)
);

CREATE TABLE listaEstudiantes ( 
    idArchivo int not null PRIMARY KEY,
    cedulaPersonal INT NOT NULL UNIQUE FOREIGN KEY REFERENCES personal(cedulaPersonal),
    excel VARCHAR(255),
    fecha DATE
);


CREATE TABLE profesor (
    cedulaProfesor INT NOT NULL UNIQUE FOREIGN KEY REFERENCES personal(cedulaPersonal),
    codigo VARCHAR(10) NOT NULL PRIMARY KEY,
    esCordinador INT
);


CREATE TABLE profesor_equipoGuia  (
    generacion INT NOT NULL FOREIGN KEY REFERENCES equipoGuia(generacion),
    idProfesor VARCHAR(10) NOT NULL FOREIGN KEY REFERENCES profesor(codigo),
    PRIMARY KEY (generacion, idProfesor)
)

CREATE TABLE equipoGuia(
    generacion INT NOT NULL PRIMARY KEY,
    idCoordinador VARCHAR(10) FOREIGN KEY REFERENCES profesor(codigo)
)

CREATE TABLE actividad(
    codigoActividad INT NOT NULL PRIMARY KEY,
    tipoActividad INT NOT NULL,
    nombreActividad VARCHAR(100) NOT NULL,
    semena INT NOT NULL,
    fechaInicio DATE,
    horaInicio DATE, 
    fechaCreacion DATE,
    modalidad INT NOT NULL,
    enlaceReunion VARCHAR(255),
    estadoActiviad INT NOT NULL
)

CREATE TABLE actividad_responsables(
    idActividad INT NOT NULL FOREIGN KEY REFERENCES actividad(codigoActividad),
    generacion INT NOT NULL,
    idProfesor VARCHAR(10) NOT NULL,
    PRIMARY KEY (idActividad, generacion, idProfesor),
    FOREIGN KEY (generacion, idProfesor) REFERENCES profesor_equipoGuia(generacion, idProfesor)
)
CREATE TABLE actividad_recordatorio (
    idActividad INT NOT NULL PRIMARY KEY FOREIGN KEY REFERENCES actividad(codigoActividad),
    fecha DATE
)


CREATE TABLE actividad_afiche(
    idActividad INT NOT NULL PRIMARY KEY FOREIGN KEY REFERENCES actividad(codigoActividad),
    idAfiche INT NOT NULL UNIQUE, 
    descripcion VARCHAR(400), 
    enlace VARCHAR(50)
    
)

CREATE TABLE actividad_evidencia_asistencia(
    idActividad INT NOT NULL PRIMARY KEY FOREIGN KEY REFERENCES actividad(codigoActividad),
    idImagen VARCHAR(100) UNIQUE,
    imgAsistencia VARCHAR(200)
)

CREATE TABLE actividad_evidencia_participante(
    idActividad INT NOT NULL PRIMARY KEY FOREIGN KEY REFERENCES actividad(codigoActividad),
    idImagen VARCHAR(100) UNIQUE,
    imgParticipantes VARCHAR(200)
)

CREATE TABLE actividad_cancelada(
    idActividad INT NOT NULL PRIMARY KEY FOREIGN KEY REFERENCES actividad(codigoActividad),
    observacion VARCHAR(500),
    fecha DATE 
)


CREATE TABLE actividad_comentarios(
    idActividad int NOT NULL UNIQUE FOREIGN KEY REFERENCES actividad(codigoActividad),
    idComentario int NOT NULL PRIMARY KEY,
    idProfesor VARCHAR(10) NOT NULL UNIQUE FOREIGN KEY REFERENCES profesor(codigo),
    mensaje VARCHAR(250) NOT NULL,
    fecha DATE NOT NULL,
    hora VARCHAR(10)


)


CREATE TABLE actividad_comentario_respuesta(
    idActividad int NOT NULL UNIQUE FOREIGN KEY REFERENCES actividad(codigoActividad),
    idComentarioRespuesta int NOT NULL PRIMARY KEY,
    idComentario int NOT NULL UNIQUE FOREIGN KEY REFERENCES actividad_comentarios(idComentario),
    mensaje VARCHAR(250) NOT NULL,
    fecha DATE NOT NULL,
    hora VARCHAR(10)
)


c
drop procedure verProfesores
EXEC verProfesores;

CREATE PROCEDURE verProfesoresPorCedulaOCodigo
  @cedula INT = NULL,
  @codigo VARCHAR(10) = NULL
AS
BEGIN
  SELECT 
    u.cedulaUsuario,
    u.nombre,
    u.segundonombre,
    u.apellido1,
    u.apellido2,
    u.correo,
    u.clave,
    u.celular,
    u.rol,
    p.idSede,
    p.telOficina,
    p.foto,
    pr.codigo,
    pr.esCordinador
  FROM usuario AS u
  INNER JOIN personal AS p ON u.cedulaUsuario = p.cedulaPersonal
  INNER JOIN profesor AS pr ON p.cedulaPersonal = pr.cedulaProfesor
  WHERE (u.cedulaUsuario = @cedula OR pr.codigo = @codigo)
    AND (@cedula IS NOT NULL OR @codigo IS NOT NULL);
END
GO

CREATE PROCEDURE contarProfesoresPorSede
  @idSede INT
AS
BEGIN
  SELECT COUNT(*) as cantidad
  FROM profesor
  JOIN personal ON profesor.cedulaProfesor = personal.cedulaPersonal
  WHERE personal.idSede = @idSede
END



CREATE PROCEDURE [dbo].[eliminar_profesor]
    @cedulaProfesor INT
AS
BEGIN
    BEGIN TRY
        -- Primero, eliminar el registro de la tabla profesor
        DELETE FROM [dbo].[profesor]
        WHERE cedulaProfesor = @cedulaProfesor

        -- Luego, eliminar el registro de la tabla personal
        DELETE FROM [dbo].[personal]
        WHERE cedulaPersonal = @cedulaProfesor

        -- Finalmente, eliminar el registro de la tabla usuario
        DELETE FROM [dbo].[usuario]
        WHERE cedulaUsuario = @cedulaProfesor
    END TRY
    BEGIN CATCH
        PRINT 'Ocurrió un error: ' + ERROR_MESSAGE()
    END CATCH
END


CREATE PROCEDURE verProfesoresSinEquipoGuia
AS
BEGIN
  SELECT 
    u.cedulaUsuario,
    u.nombre,
    u.segundonombre,
    u.apellido1,
    u.apellido2,
    u.correo,
    u.celular,
    u.rol,
    p.idSede,
    p.telOficina,
    p.foto,
    pr.codigo,
    pr.esCordinador
  FROM usuario AS u
  INNER JOIN personal AS p ON u.cedulaUsuario = p.cedulaPersonal
  INNER JOIN profesor AS pr ON p.cedulaPersonal = pr.cedulaProfesor
  WHERE pr.codigo NOT IN (SELECT idProfesor FROM profesor_equipoGuia);
END

CREATE PROCEDURE verProfesoresSinEquipoGuiaPorSede
    @idSede INT
AS
BEGIN
  SELECT 
    u.cedulaUsuario,
    u.nombre,
    u.segundonombre,
    u.apellido1,
    u.apellido2,
    u.correo,
    u.celular,
    u.rol,
    p.idSede,
    p.telOficina,
    p.foto,
    pr.codigo,
    pr.esCordinador
  FROM usuario AS u
  INNER JOIN personal AS p ON u.cedulaUsuario = p.cedulaPersonal
  INNER JOIN profesor AS pr ON p.cedulaPersonal = pr.cedulaProfesor
  WHERE pr.codigo NOT IN (SELECT idProfesor FROM profesor_equipoGuia) AND p.idSede = @idSede;
END


CREATE PROCEDURE verAsistentePorCedula
    @cedula INT
AS
BEGIN
  SELECT 
    u.cedulaUsuario,
    u.nombre,
    u.segundonombre,
    u.apellido1,
    u.apellido2,
    u.correo,
    u.clave,
    u.celular,
    u.rol,
    p.idSede,
    p.telOficina,
    p.foto
  FROM usuario AS u
  INNER JOIN personal AS p ON u.cedulaUsuario = p.cedulaPersonal
  WHERE u.cedulaUsuario = @cedula AND u.rol = 'ASISTENTE';
END


CREATE PROCEDURE GetProfesoresPorGeneracion
    @generacion INT
AS
BEGIN
    SELECT 
        p.codigo, 
        u.nombre,
        u.segundonombre,
        u.apellido1,
        u.apellido2,
        u.correo,
        u.celular,
        per.telOficina,
        per.foto,
        p.esCordinador
    FROM profesor_equipoGuia AS peg
    INNER JOIN profesor AS p ON peg.idProfesor = p.codigo
    INNER JOIN personal AS per ON p.cedulaProfesor = per.cedulaPersonal
    INNER JOIN usuario AS u ON per.cedulaPersonal = u.cedulaUsuario
    WHERE peg.generacion = @generacion;
END


CREATE PROCEDURE definirCoordinador 
    @codigoProfesor VARCHAR(10), 
    @generacion INT
AS
BEGIN
    -- Declaramos una variable para guardar el código del coordinador anterior
    DECLARE @codigoProfesorAntiguo VARCHAR(10);

    -- Buscamos el coordinador antiguo
    SELECT @codigoProfesorAntiguo = idCoordinador 
    FROM equipoGuia
    WHERE generacion = @generacion;

    -- Si existe un coordinador antiguo, cambiamos su esCordinador a 0
    IF (@codigoProfesorAntiguo IS NOT NULL) 
    BEGIN
        UPDATE profesor 
        SET esCordinador = 0 
        WHERE codigo = @codigoProfesorAntiguo;
    END

    -- Cambiamos el idCoordinador de la tabla equipoGuia al nuevo profesor
    UPDATE equipoGuia 
    SET idCoordinador = @codigoProfesor 
    WHERE generacion = @generacion;

    -- Cambiamos el esCordinador a 1 del nuevo profesor
    UPDATE profesor 
    SET esCordinador = 1 
    WHERE codigo = @codigoProfesor;
END;



